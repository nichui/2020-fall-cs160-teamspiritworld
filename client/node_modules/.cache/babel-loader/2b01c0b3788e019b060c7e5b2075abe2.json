{"ast":null,"code":"import { SET_CURRENT_USER, USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"../actions/types\";\n\nconst isEmpty = require(\"is-empty\");\n\nconst initialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  isLoading: false,\n  user: null\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return { ...state,\n        isAuthenticated: !isEmpty(action.payload),\n        user: action.payload\n      };\n\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      return { ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      return { ...state,\n        ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/khatk/Desktop/Tutorials/Web Development/spiritworld/client/src/reducers/authReducer.js"],"names":["SET_CURRENT_USER","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","isEmpty","require","initialState","token","localStorage","getItem","isAuthenticated","isLoading","user","state","action","type","payload"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,YAFJ,EAGIC,WAHJ,EAIIC,UAJJ,EAKIC,aALJ,EAMIC,UANJ,EAOIC,cAPJ,EAQIC,gBARJ,EASIC,aATJ,QAWS,kBAXT;;AAYE,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADY;AAEnBC,EAAAA,eAAe,EAAE,IAFE;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,IAAI,EAAE;AAJa,CAArB;AAOA,eAAe,UAASC,KAAK,GAAGP,YAAjB,EAA+BQ,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKpB,gBAAL;AACE,aAAO,EACL,GAAGkB,KADE;AAELH,QAAAA,eAAe,EAAE,CAACN,OAAO,CAACU,MAAM,CAACE,OAAR,CAFpB;AAGLJ,QAAAA,IAAI,EAAEE,MAAM,CAACE;AAHR,OAAP;;AAKF,SAAKpB,YAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELF,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKd,WAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELH,QAAAA,eAAe,EAAE,IAFZ;AAGLC,QAAAA,SAAS,EAAE,KAHN;AAILC,QAAAA,IAAI,EAAEE,MAAM,CAACE;AAJR,OAAP;;AAMF,SAAKjB,aAAL;AACA,SAAKG,gBAAL;AACE,aAAO,EACL,GAAGW,KADE;AAEL,WAAGC,MAAM,CAACE,OAFL;AAGLN,QAAAA,eAAe,EAAE,IAHZ;AAILC,QAAAA,SAAS,EAAE;AAJN,OAAP;;AAOF;AACE,aAAOE,KAAP;AA7BJ;AA+BD","sourcesContent":["import {\r\n    SET_CURRENT_USER,\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    \r\n  } from \"../actions/types\";\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    token: localStorage.getItem('token'),\r\n    isAuthenticated: null,\r\n    isLoading: false,\r\n    user: null,\r\n   \r\n  };\r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n      case SET_CURRENT_USER:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: !isEmpty(action.payload),\r\n          user: action.payload\r\n        };\r\n      case USER_LOADING:\r\n        return {\r\n          ...state,\r\n          isLoading: true\r\n        };\r\n      case USER_LOADED:\r\n        return {\r\n          ...state,\r\n          isAuthenticated: true,\r\n          isLoading: false,\r\n          user: action.payload\r\n        };\r\n      case LOGIN_SUCCESS:\r\n      case REGISTER_SUCCESS:\r\n        return {\r\n          ...state,\r\n          ...action.payload,\r\n          isAuthenticated: true,\r\n          isLoading: false,\r\n          \r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}