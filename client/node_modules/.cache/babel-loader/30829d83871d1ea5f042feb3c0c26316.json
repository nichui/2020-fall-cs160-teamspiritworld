{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { returnErrors } from \"./errorAction\";\nimport jwt_decode from \"jwt-decode\";\nimport { SET_CURRENT_USER, USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage// Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["C:/Users/khatk/Desktop/Tutorials/Web Development/spiritworld/client/src/actions/authActions.js"],"names":["axios","setAuthToken","returnErrors","jwt_decode","SET_CURRENT_USER","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","GET_ERRORS","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,gBADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,cAPF,EAQEC,gBARF,EASEC,aATF,QAUO,SAVP,C,CAUiB;;AACjB,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DhB,EAAAA,KAAK,CACFiB,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,EAEuC;AAFvC,GAGGC,KAHH,CAGSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEC,UADC;AAEPC,IAAAA,OAAO,EAAEH,GAAG,CAACI,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAVM,C,CAUL;;AACF,OAAO,MAAMC,SAAS,GAAGd,QAAQ,IAAIE,QAAQ,IAAI;AAC/ChB,EAAAA,KAAK,CACFiB,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAYV,GAAG,CAACQ,IAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAHW,CAIX;;AACA5B,IAAAA,YAAY,CAAC4B,KAAD,CAAZ,CALW,CAMX;;AACA,UAAMG,OAAO,GAAG7B,UAAU,CAAC0B,KAAD,CAA1B,CAPW,CAQX;;AACAb,IAAAA,QAAQ,CAACiB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAZH,EAaGX,KAbH,CAaSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEC,UADC;AAEPC,IAAAA,OAAO,EAAEH,GAAG,CAACI,QAAJ,CAAaC;AAFf,GAAD,CAdZ;AAmBD,CApBM,C,CAoBL;;AACF,OAAO,MAAMM,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLT,IAAAA,IAAI,EAAEnB,gBADD;AAELqB,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAKL;;AACF,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLX,IAAAA,IAAI,EAAElB;AADD,GAAP;AAGD,CAJM,C,CAIL;;AACF,OAAO,MAAM8B,UAAU,GAAG,MAAMnB,QAAQ,IAAI;AAC1C;AACAc,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAnC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAe,EAAAA,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport {returnErrors} from \"./errorAction\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  SET_CURRENT_USER,\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from \"./types\";// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};"]},"metadata":{},"sourceType":"module"}