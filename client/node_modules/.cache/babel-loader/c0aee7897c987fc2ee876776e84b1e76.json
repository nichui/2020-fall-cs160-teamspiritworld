{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khatk\\\\Desktop\\\\Tutorials\\\\Web Development\\\\spiritworld\\\\client\\\\src\\\\components\\\\Pages\\\\Home.js\";\nimport React, { Component, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport Navbaruser from \"../Layout/NavbarUser\";\nimport { BrowserRouter } from 'react-router-dom';\nimport { fetchAllPosts, getPopularResources } from '../../actions/resourceAction';\nimport { RowGenerator, GenerateRowsWithBlocks } from '../../utils/helpers';\nimport '../../css/styles.css';\nimport Resource from '../Layout/Resource';\nimport { bindActionCreators } from \"redux\";\nimport { Alert, Spinner } from \"reactstrap\";\n\nconst Posts = ({\n  getPopularResources,\n  posts,\n  loading,\n  error\n}) => {\n  useEffect(() => {\n    getPopularResources();\n  }, [getPopularResources]);\n  const noPostsMessage = \"There are no posts to be fetched\";\n  const renderPosts = posts.length === 0 ? /*#__PURE__*/React.createElement(Alert, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, noPostsMessage) : posts.map(post => {\n    return /*#__PURE__*/React.createElement(Post, {\n      key: post._id,\n      id: post._id,\n      author: post.author,\n      content: post.content,\n      createdAt: post.createdAt,\n      updatedAt: post.updatedAt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Spinner, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    color: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, error) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, renderPosts));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    posts: state.posts,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllPosts: () => dispatch(fetchAllPosts())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n/*\r\nclass Home extends Component {\r\n*/\n\n/*\r\nstatic propTypes={\r\n  logout: PropTypes.func.isRequired\r\n}\r\n*/\n\n/*\r\n componentDidMount(){\r\n   this.props.dispatch(getResources(6,0,'desc'));\r\n }\r\n */\n\n/*\r\nshowResources = (resource) =>{\r\n    if(resource.collection){\r\n      const rowArray = RowGenerator(resource.collection, 2);\r\n      //console.log(rowArray)\r\n      const generatedResources = GenerateRowsWithBlocks(rowArray,'six')\r\n      return generatedResources;\r\n    }\r\n  return false;\r\n}\r\n*/\n\n/*\r\n onLogoutClick = e => {\r\n   e.preventDefault();\r\n   this.props.logoutUser();\r\n };\r\n */\n\n/*\r\n  componentDidMount = () => {\r\n    this.props.getPopularResources();\r\n}\r\n*/\n\n/*  \r\n  componentDidMount(){\r\n    this.props.dispatch(getPopularResources())\r\n}\r\n*/\n\n/*\r\nloadmore = () => {\r\n    let resourceList = this.props.resources.collection;\r\n    //let count = resourceList.length;\r\n    this.props.dispatch(getPopularResources('desc',resourceList))\r\n}\r\n\r\n\r\nshowResources = (resources) => {\r\n    if(resources){\r\n        const rowsArray = RowGenerator(resources, 2);\r\n        const generatedResources = GenerateRowsWithBlocks(rowsArray,'six')\r\n        return generatedResources;\r\n    }\r\n    return false;\r\n}\r\n*/\n\n/*\r\n  render() {\r\n     //console.log(this.props.resources)\r\n    //const {resources} = this.props.resources;\r\n    const {items} = this.props.resources;\r\n    console.log(this.props.resources)\r\n    return (\r\n     \r\n    <div>\r\n      \r\n      \r\n      <Navbaruser />\r\n      <div style={{ height: \"75vh\" }} >\r\n        Wecome to the homepage!\r\n       \r\n\r\n            <button\r\n              style={{\r\n                width: \"150px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\"\r\n              }}\r\n              onClick={this.onLogoutClick}\r\n              href=\"#\"\r\n              \r\n            >\r\n              Logout\r\n            </button>\r\n              \r\n      \r\n            {/*this.showResources(this.props.resources)}*/\n\n/*\r\n<div>\r\n<Resource\r\n          title={this.props.resources.title}\r\ncontent={this.props.resources.content}\r\ncategory={this.props.resources.category}\r\nrating={this.props.resources.rating}\r\n/>\r\n</div>\r\n     </div>\r\n</div>\r\n);\r\n}\r\n}\r\nHome.propTypes = {\r\n//getResources: PropTypes.func.isRequired,\r\n//resource: PropTypes.object.isRequired,\r\nlogoutUser: PropTypes.func.isRequired,\r\nauth: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n// resources: state.resources, //same as the one in rootReducer\r\nauth: state.auth,\r\nresources: state.resources\r\n});\r\nexport default connect(\r\nmapStateToProps,\r\n{ logoutUser, getPopularResources }\r\n)(Home);\r\n*/","map":{"version":3,"sources":["C:/Users/khatk/Desktop/Tutorials/Web Development/spiritworld/client/src/components/Pages/Home.js"],"names":["React","Component","useEffect","PropTypes","connect","logoutUser","Navbaruser","BrowserRouter","fetchAllPosts","getPopularResources","RowGenerator","GenerateRowsWithBlocks","Resource","bindActionCreators","Alert","Spinner","Posts","posts","loading","error","noPostsMessage","renderPosts","length","map","post","_id","author","content","createdAt","updatedAt","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,SAAQC,aAAR,EAAuBC,mBAAvB,QAAiD,8BAAjD;AACA,SAAQC,YAAR,EAAsBC,sBAAtB,QAAmD,qBAAnD;AACA,OAAQ,sBAAR;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAAQC,KAAR,EAAcC,OAAd,QAA4B,YAA5B;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEP,EAAAA,mBAAF;AAAuBQ,EAAAA,KAAvB;AAA8BC,EAAAA,OAA9B;AAAuCC,EAAAA;AAAvC,CAAD,KAAoD;AAChEjB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,CAACA,mBAAD,CAFM,CAAT;AAIA,QAAMW,cAAc,GAAG,kCAAvB;AAEA,QAAMC,WAAW,GACfJ,KAAK,CAACK,MAAN,KAAiB,CAAjB,gBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBF,cAAxB,CADF,GAGEH,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AAClB,wBACE,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,MAAA,EAAE,EAAED,IAAI,CAACC,GAFX;AAGE,MAAA,MAAM,EAAED,IAAI,CAACE,MAHf;AAIE,MAAA,OAAO,EAAEF,IAAI,CAACG,OAJhB;AAKE,MAAA,SAAS,EAAEH,IAAI,CAACI,SALlB;AAME,MAAA,SAAS,EAAEJ,IAAI,CAACK,SANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAXD,CAJJ;AAkBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,OAAO,gBACN,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAEJC,KAAK,gBACP,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBA,KAAvB,CADO,gBAGP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAME,WAAN,CANJ,CADF;AAWD,CApCD;;AAqCA,MAAMS,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLb,IAAAA,OAAO,EAAEa,KAAK,CAACb,OADV;AAELD,IAAAA,KAAK,EAAEc,KAAK,CAACd,KAFR;AAGLE,IAAAA,KAAK,EAAEY,KAAK,CAACZ;AAHR,GAAP;AAKD,CAND;;AAQA,MAAMa,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLzB,IAAAA,aAAa,EAAE,MAAMyB,QAAQ,CAACzB,aAAa,EAAd;AADxB,GAAP;AAGD,CAJD;;AAMA,eAAeJ,OAAO,CAAC0B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChB,KAA7C,CAAf;AACE;;;;AAKA;;;;;;AAKD;;;;;;AAKC;;;;;;;;;;;;AAYD;;;;;;;AAMD;;;;;;AAKA;;;;;;AAKA;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCY","sourcesContent":["import React, { Component, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nimport Navbaruser from \"../Layout/NavbarUser\";\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {fetchAllPosts, getPopularResources} from '../../actions/resourceAction';\r\nimport {RowGenerator, GenerateRowsWithBlocks} from '../../utils/helpers'\r\nimport  '../../css/styles.css'\r\nimport Resource from '../Layout/Resource'\r\nimport { bindActionCreators } from \"redux\";\r\nimport {Alert,Spinner} from \"reactstrap\"\r\n\r\nconst Posts = ({ getPopularResources, posts, loading, error }) => {\r\n  useEffect(() => {\r\n    getPopularResources();\r\n  }, [getPopularResources]);\r\n\r\n  const noPostsMessage = \"There are no posts to be fetched\";\r\n\r\n  const renderPosts =\r\n    posts.length === 0 ? (\r\n      <Alert color=\"primary\">{noPostsMessage}</Alert>\r\n    ) : (\r\n      posts.map((post) => {\r\n        return (\r\n          <Post\r\n            key={post._id}\r\n            id={post._id}\r\n            author={post.author}\r\n            content={post.content}\r\n            createdAt={post.createdAt}\r\n            updatedAt={post.updatedAt}\r\n          />\r\n        );\r\n      })\r\n    );\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <Spinner color=\"primary\" />\r\n      ) : error ? (\r\n        <Alert color=\"danger\">{error}</Alert>\r\n      ) : (\r\n        <div>{renderPosts}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.loading,\r\n    posts: state.posts,\r\n    error: state.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchAllPosts: () => dispatch(fetchAllPosts()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n  /*\r\nclass Home extends Component {\r\n  */\r\n  \r\n  \r\n  /*\r\n  static propTypes={\r\n    logout: PropTypes.func.isRequired\r\n  }\r\n  */\r\n /*\r\n  componentDidMount(){\r\n    this.props.dispatch(getResources(6,0,'desc'));\r\n  }\r\n  */\r\n  /*\r\n  showResources = (resource) =>{\r\n\r\n    if(resource.collection){\r\n        const rowArray = RowGenerator(resource.collection, 2);\r\n        //console.log(rowArray)\r\n        const generatedResources = GenerateRowsWithBlocks(rowArray,'six')\r\n        return generatedResources;\r\n      }\r\n    return false;\r\n  }\r\n  */\r\n /*\r\n  onLogoutClick = e => {\r\n    e.preventDefault();\r\n    this.props.logoutUser();\r\n  };\r\n  */\r\n/*\r\n  componentDidMount = () => {\r\n    this.props.getPopularResources();\r\n}\r\n*/\r\n/*  \r\n  componentDidMount(){\r\n    this.props.dispatch(getPopularResources())\r\n}\r\n*/\r\n/*\r\nloadmore = () => {\r\n    let resourceList = this.props.resources.collection;\r\n    //let count = resourceList.length;\r\n    this.props.dispatch(getPopularResources('desc',resourceList))\r\n}\r\n\r\n\r\nshowResources = (resources) => {\r\n    if(resources){\r\n        const rowsArray = RowGenerator(resources, 2);\r\n        const generatedResources = GenerateRowsWithBlocks(rowsArray,'six')\r\n        return generatedResources;\r\n    }\r\n    return false;\r\n}\r\n*/\r\n/*\r\n  render() {\r\n     //console.log(this.props.resources)\r\n    //const {resources} = this.props.resources;\r\n    const {items} = this.props.resources;\r\n    console.log(this.props.resources)\r\n    return (\r\n     \r\n    <div>\r\n      \r\n      \r\n      <Navbaruser />\r\n      <div style={{ height: \"75vh\" }} >\r\n        Wecome to the homepage!\r\n       \r\n\r\n            <button\r\n              style={{\r\n                width: \"150px\",\r\n                borderRadius: \"3px\",\r\n                letterSpacing: \"1.5px\",\r\n                marginTop: \"1rem\"\r\n              }}\r\n              onClick={this.onLogoutClick}\r\n              href=\"#\"\r\n              \r\n            >\r\n              Logout\r\n            </button>\r\n              \r\n      \r\n            {/*this.showResources(this.props.resources)}*/\r\n            /*\r\n     <div>\r\n     <Resource\r\n          \r\n          title={this.props.resources.title}\r\n          content={this.props.resources.content}\r\n          category={this.props.resources.category}\r\n          rating={this.props.resources.rating}\r\n        />\r\n    \r\n     </div>\r\n       \r\n        </div>\r\n        </div>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n  //getResources: PropTypes.func.isRequired,\r\n  //resource: PropTypes.object.isRequired,\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired\r\n\r\n};\r\nconst mapStateToProps = state => ({\r\n // resources: state.resources, //same as the one in rootReducer\r\n  auth: state.auth,\r\n  resources: state.resources\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { logoutUser, getPopularResources }\r\n)(Home);\r\n*/"]},"metadata":{},"sourceType":"module"}