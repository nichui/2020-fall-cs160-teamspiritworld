{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { returnErrors } from \"./errorAction\";\nimport jwt_decode from \"jwt-decode\";\nimport { SET_CURRENT_USER, USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Register User\n\nexport const registerUser = ({\n  firstName,\n  lastName,\n  email,\n  password\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //Request body\n\n  const body = JSON.stringify({\n    firstName,\n    lastName,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\n/*\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n*/\n// Login - get user token\n\n/*\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};// Set logged in user\r\n*/\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["C:/Users/khatk/Desktop/Tutorials/Web Development/spiritworld/client/src/actions/authActions.js"],"names":["axios","setAuthToken","returnErrors","jwt_decode","SET_CURRENT_USER","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","registerUser","firstName","lastName","email","password","dispatch","config","headers","body","JSON","stringify","post","then","res","type","payload","data","catch","err","response","status","setCurrentUser","decoded","setUserLoading","logoutUser","localStorage","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SACEC,gBADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,EAMEC,UANF,EAOEC,cAPF,EAQEC,gBARF,EASEC,aATF,QAUO,SAVP,C,CAUiB;;AACjB,OAAO,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA,KAAtB;AAA6BC,EAAAA;AAA7B,CAAD,KAA4CC,QAAQ,IAAI;AACpF;AACE,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAFkF,CAOpF;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BT,IAAAA,SAD0B;AACfC,IAAAA,QADe;AACNC,IAAAA,KADM;AACAC,IAAAA;AADA,GAAf,CAAb;AAGAjB,EAAAA,KAAK,CAACwB,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,EACCM,IADD,CACMC,GAAG,IAAIR,QAAQ,CAAC;AACpBS,IAAAA,IAAI,EAAEhB,gBADc;AAEpBiB,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFO,GAAD,CADrB,EAKCC,KALD,CAKOC,GAAG,IAAI;AACZb,IAAAA,QAAQ,CAAChB,YAAY,CAAC6B,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAf,IAAAA,QAAQ,CAAC;AAEPS,MAAAA,IAAI,EAAEf;AAFC,KAAD,CAAR;AAKD,GAZD;AAaC,CAxBM;AAyBP;;;;;;;;;;;;;AAYE;;AACF;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,MAAMsB,cAAc,GAAGC,OAAO,IAAI;AACvC,SAAO;AACLR,IAAAA,IAAI,EAAEvB,gBADD;AAELwB,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAKL;;AACF,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO;AACLT,IAAAA,IAAI,EAAEtB;AADD,GAAP;AAGD,CAJM,C,CAIL;;AACF,OAAO,MAAMgC,UAAU,GAAG,MAAMnB,QAAQ,IAAI;AAC1C;AACAoB,EAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAtC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAiB,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport {returnErrors} from \"./errorAction\"\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  SET_CURRENT_USER,\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from \"./types\";// Register User\r\nexport const registerUser = ({firstName, lastName, email, password}) => dispatch => {\r\n//Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n//Request body\r\nconst body = JSON.stringify({\r\n  firstName, lastName,email,password\r\n});\r\naxios.post('/api/users', body, config)\r\n.then(res => dispatch({\r\n  type: REGISTER_SUCCESS,\r\n  payload: res.data\r\n}))\r\n.catch(err => {\r\n  dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\r\n  dispatch({\r\n    \r\n    type: REGISTER_FAIL\r\n  });\r\n\r\n})\r\n}\r\n/*\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n*/// Login - get user token\r\n/*\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};// Set logged in user\r\n*/\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};"]},"metadata":{},"sourceType":"module"}