{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khatk\\\\Desktop\\\\Tutorials\\\\Web Development\\\\spiritworld\\\\client\\\\src\\\\components\\\\Pages\\\\Register.js\";\nimport React, { Component } from 'react';\nimport '../../css/styles.css';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\n/*\r\nconst RegisterSchema = Yup.object().shape({\r\n\tfirstName: Yup.string().required('Required!!'),\r\n\tlastName: Yup.string().required('Required!!'),\r\n\temail: Yup.string().email('Invalid email :(').required('Required !!'),\r\n\tpassword: Yup.string().min(6,'Too short').required('Required !!'),\r\n\tconfirmPassword: Yup.string().oneOf([Yup.ref('password'),null],'Passwords must match').required('Required !!'),})\r\n\t*/\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const newUser = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        password: this.state.password,\n        password2: this.state.password2\n      };\n      this.props.registerUser(newUser, this.props.history);\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      errors: {}\n    };\n  }\n  /*\r\n  static propTypes ={\r\n  \tisAuthenticated: PropTypes.bool,\r\n  error: PropTypes.object.isRequired,\r\n  register: PropTypes.func.isRequired\r\n  }\r\n  */\n\n\n  componentDidMount() {\n    // If logged in and user navigates to Register page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/home\");\n    }\n  }\n  /*\r\n  state = {\r\n  \tsuccess: false,\r\n  \tvalidation:false\r\n  }\r\n  */\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"log\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      class: \"text-center border border-light p-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      class: \"h4 mb-4 FormTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 8\n      }\n    }, \"Sign up\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-row mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"first name\",\n      type: \"text\",\n      id: \"validationCustom01\",\n      class: \"form-control\",\n      placeholder: \"First name\",\n      onChange: this.onChange,\n      value: this.state.firstname,\n      error: errors.firstname,\n      id: \"firstname\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 16\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"last name\",\n      type: \"text\",\n      id: \"defaultRegisterFormLastName\",\n      class: \"form-control\",\n      placeholder: \"Last name\",\n      onChange: this.onChange,\n      value: this.state.lastname,\n      error: errors.lastname,\n      id: \"lastname\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"email\",\n      type: \"email\",\n      id: \"defaultRegisterFormEmail\",\n      class: \"form-control mb-4\",\n      placeholder: \"E-mail\",\n      onChange: this.onChange,\n      value: this.state.email,\n      error: errors.email,\n      id: \"email\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"password\",\n      type: \"password\",\n      id: \"defaultRegisterFormPassword\",\n      class: \"form-control\",\n      placeholder: \"Password\",\n      \"aria-describedby\": \"defaultRegisterFormPasswordHelpBlock\",\n      onChange: this.onChange,\n      value: this.state.password,\n      error: errors.password,\n      id: \"password\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      id: \"defaultRegisterFormPasswordHelpBlock\",\n      class: \"form-text text-muted mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 8\n      }\n    }, \"At least 8 characters and 1 digit\"), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"confirm password\",\n      type: \"password\",\n      id: \"defaultRegisterPhonePassword\",\n      class: \"form-control\",\n      placeholder: \"Confirm Password\",\n      \"aria-describedby\": \"defaultRegisterFormPasswordHelpBlock\",\n      onChange: this.onChange,\n      value: this.state.password2,\n      error: errors.password2,\n      id: \"password2\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      id: \"defaultRegisterFormPasswordHelpBlock\",\n      class: \"form-text text-muted mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 8\n      }\n    }, \"Re-enter your password\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-info my-4 btn-block\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 8\n      }\n    }, \"Submit\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n/*\r\nRegister.propTypes = {\r\n\tregisterUser: PropTypes.func.isRequired,\r\n\tauth: PropTypes.object.isRequired,\r\n\terrors: PropTypes.object.isRequired\r\n  };\r\n  */\n\n/*\r\n const mapStateToProps = state => ({\r\nauth: state.auth,\r\nerrors: state.errors\r\n });\r\n */\n\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["C:/Users/khatk/Desktop/Tutorials/Web Development/spiritworld/client/src/components/Pages/Register.js"],"names":["React","Component","Link","withRouter","Formik","Yup","PropTypes","connect","registerUser","Register","constructor","onChange","e","setState","target","id","value","onSubmit","preventDefault","newUser","firstname","state","lastname","email","password","password2","props","history","errors","componentDidMount","auth","isAuthenticated","push","componentWillReceiveProps","nextProps","render","mapStateToProps","error"],"mappings":"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","sourcesContent":["\r\nimport React, {Component} from 'react';\r\nimport '../../css/styles.css';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\n\r\n\r\n/*\r\nconst RegisterSchema = Yup.object().shape({\r\n\tfirstName: Yup.string().required('Required!!'),\r\n\tlastName: Yup.string().required('Required!!'),\r\n\temail: Yup.string().email('Invalid email :(').required('Required !!'),\r\n\tpassword: Yup.string().min(6,'Too short').required('Required !!'),\r\n\tconfirmPassword: Yup.string().oneOf([Yup.ref('password'),null],'Passwords must match').required('Required !!'),})\r\n\t*/\r\n\t\r\nclass Register extends Component{\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t  firstname: \"\",\r\n\t\t  lastname:\"\",\r\n\t\t  email: \"\",\r\n\t\t  password: \"\",\r\n\t\t  password2: \"\",\r\n\t\t  errors: {}\r\n\t\t};\r\n\t  }\r\n\t  /*\r\n\t  static propTypes ={\r\n\r\n\t\tisAuthenticated: PropTypes.bool,\r\n\t\terror: PropTypes.object.isRequired,\r\n\t\tregister: PropTypes.func.isRequired\r\n\t  }\r\n\t  */\r\n\tcomponentDidMount() {\r\n\t\t// If logged in and user navigates to Register page, should redirect them to dashboard\r\n\t\tif (this.props.auth.isAuthenticated) {\r\n\t\t  this.props.history.push(\"/home\");\r\n\t\t}\r\n\t  }\r\n\t/*\r\n\tstate = {\r\n\t\tsuccess: false,\r\n\t\tvalidation:false\r\n\t}\r\n\t*/\r\n\t\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\tif (nextProps.errors) {\r\n\t\t  this.setState({\r\n\t\t\terrors: nextProps.errors\r\n\t\t  });\r\n\t\t}\r\n\t  }\r\n\t\r\n\t\r\n\t  onChange = e => {\r\n\t\tthis.setState({ [e.target.id]: e.target.value });\r\n\t  };\r\n\t\r\n\t  onSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\r\n\t\tconst newUser = {\r\n\t\t  firstname: this.state.firstname,\r\n\t\t  lastname: this.state.lastname,\r\n\t\t  email: this.state.email,\r\n\t\t  password: this.state.password,\r\n\t\t  password2: this.state.password2\r\n\t\t};\r\n\t\r\n\t\tthis.props.registerUser(newUser, this.props.history);\r\n\t  };\r\n\t\r\n\t\r\n\trender(){\r\n\t\tconst{errors} = this.state;\r\n\treturn(\r\n\t\t<div className=\"log\">\r\n\t\t\t{/*<Formik\r\n\t\t\t\tinitialValues={{firstName:\"\",lastName:\"\", email:\"\", password:\"\",confirmPassword:\"\"}}\r\n\t\t\t\tvalidationSchema={RegisterSchema}\r\n\t\t\t\tonSubmit={values=>{\r\n\t\t\t\t\tthis.props.dispatch(registerUser(values)).then(response => {\r\n\t\t\t\t\t\tif(!this.props.user.auth){\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tvalidation:true\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})    \r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{({\r\n\t\t\t\t\tvalues,\r\n\t\t\t\t\terrors,\r\n\t\t\t\t\ttouched,\r\n\t\t\t\t\thandleChange,\r\n\t\t\t\t\thandleBlur,\r\n\t\t\t\t\thandleSubmit\r\n\t\t\t\t})=>(\r\n\r\n\t\t\t\t*/}\r\n\t\t\t<form onSubmit={this.onSubmit} class=\"text-center border border-light p-5\">\r\n    \t\t\t<p class=\"h4 mb-4 FormTitle\">Sign up</p>\r\n\r\n    \t\t\t<div class=\"form-row mb-4\">\r\n        \t\t\t<div class=\"col\">\r\n            \t\t\t<input  name=\"first name\" type=\"text\" id=\"validationCustom01\" class=\"form-control\" placeholder=\"First name\"  onChange={this.onChange} value={this.state.firstname} error={errors.firstname} id=\"firstname\" required />\r\n\t\t\t\t\t\t\r\n        \t\t\t</div>\r\n        \t\t\t<div class=\"col\">\r\n            \r\n            \t\t\t<input  name=\"last name\" type=\"text\" id=\"defaultRegisterFormLastName\" class=\"form-control\" placeholder=\"Last name\" onChange={ this.onChange}  value={this.state.lastname} error={errors.lastname} id=\"lastname\" required/>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n    \r\n    \t\t\t<input  name=\"email\" type=\"email\" id=\"defaultRegisterFormEmail\" class=\"form-control mb-4\" placeholder=\"E-mail\" onChange={this.onChange} value={this.state.email} error={errors.email} id=\"email\" required />\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n    \t\t\t<input   name=\"password\" type=\"password\" id=\"defaultRegisterFormPassword\" class=\"form-control\" placeholder=\"Password\" aria-describedby=\"defaultRegisterFormPasswordHelpBlock\" onChange={this.onChange}  value={this.state.password} error={errors.password} id=\"password\" required />\r\n    \t\t\t<small id=\"defaultRegisterFormPasswordHelpBlock\" class=\"form-text text-muted mb-4\">\r\n       \t\t\t At least 8 characters and 1 digit\r\n    \t\t\t</small>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t<input  name=\"confirm password\" type=\"password\" id=\"defaultRegisterPhonePassword\" class=\"form-control\" placeholder=\"Confirm Password\" aria-describedby=\"defaultRegisterFormPasswordHelpBlock\" onChange={this.onChange}  value={this.state.password2} error={errors.password2} id=\"password2\" required/>\r\n    \t\t\t<small id=\"defaultRegisterFormPasswordHelpBlock\" class=\"form-text text-muted mb-4\">\r\n       \t\t\tRe-enter your password\r\n    \t\t\t</small>\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n   \t\t\t\t<hr/>\r\n    \t\t\t<button class=\"btn btn-info my-4 btn-block\" type=\"submit\">Submit</button>\r\n\r\n    \r\n\t\t\t\r\n\r\n\t\t\t</form>\r\n\t\t\t\t\r\n\t\t\t\t{/*</Formik>*/}\r\n\r\n   </div>\r\n\r\n\r\n\r\n\t\r\n\t)\r\n}\r\n}\r\nconst mapStateToProps = state => ({\r\n\tisAuthenticated: state.auth.isAuthenticated,\r\n\terror: state.error\r\n})\r\n\r\n\r\n/*\r\nRegister.propTypes = {\r\n\tregisterUser: PropTypes.func.isRequired,\r\n\tauth: PropTypes.object.isRequired,\r\n\terrors: PropTypes.object.isRequired\r\n  };\r\n  */\r\n /*\r\n  const mapStateToProps = state => ({\r\n\tauth: state.auth,\r\n\terrors: state.errors\r\n  });\r\n  */\r\n  export default connect(\r\n\tmapStateToProps,\r\n\t{ registerUser }\r\n  )(withRouter(Register));\r\n\r\n"]},"metadata":{},"sourceType":"module"}