{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { returnErrors } from \"./errorAction\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Register User\n\nexport const registerUser = ({\n  firstname,\n  lastname,\n  email,\n  password,\n  password2\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //Request body\n\n  const body = JSON.stringify({\n    firstname,\n    lastname,\n    email,\n    password,\n    password2\n  });\n  axios.post('/api/users/register', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\n/*\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n*/\n// Login - get user token\n// Login User\n\nexport const loginUser = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/api/users/login', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.res.data, err.res.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\n/*\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};// Set logged in user\r\n*/\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};\n/*\r\nexport const logoutUser = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS\r\n  }\r\n}\r\n*/\n\n/*\r\nexport function logoutUser(){\r\n  const request = axios.get('/api/users/logout')\r\n                  .then( response => { \r\n                      return null\r\n                  });\r\n  return {\r\n      type: LOGOUT_SUCCESS,\r\n      payload:request\r\n  }        \r\n}\r\n*/","map":{"version":3,"sources":["C:/Users/khatk/Desktop/Tutorials/Web Development/spiritworld/client/src/actions/authActions.js"],"names":["axios","setAuthToken","returnErrors","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","registerUser","firstname","lastname","email","password","password2","dispatch","config","headers","body","JSON","stringify","post","then","res","type","payload","data","catch","err","response","status","loginUser","setCurrentUser","decoded","setUserLoading","logoutUser","localStorage","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport {returnErrors} from \"./errorAction\"\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL\r\n} from \"./types\";// Register User\r\n\r\nexport const registerUser = ({firstname, lastname, email, password, password2}) => dispatch => {\r\n//Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n//Request body\r\n\r\nconst body = JSON.stringify({\r\n  firstname, lastname,email,password,password2\r\n});\r\naxios.post('/api/users/register', body, config)\r\n.then(res => dispatch({\r\n  type: REGISTER_SUCCESS,\r\n  payload: res.data\r\n}))\r\n.catch(err => {\r\n  dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\r\n  dispatch({\r\n    \r\n    type: REGISTER_FAIL\r\n  });\r\n\r\n})\r\n}\r\n\r\n/*\r\nexport const registerUser = (userData, history) => dispatch => {\r\n  axios\r\n    .post(\"/api/users/register\", userData)\r\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};\r\n*/\r\n// Login - get user token\r\n// Login User\r\nexport const loginUser = ({ email, password })=> dispatch => {\r\n \r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  // Request body\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  axios\r\n    .post('/api/users/login', body, config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(\r\n        returnErrors(err.res.data, err.res.status, 'LOGIN_FAIL')\r\n      );\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    });\r\n};\r\n/*\r\nexport const loginUser = userData => dispatch => {\r\n  axios\r\n    .post(\"/api/users/login\", userData)\r\n    .then(res => {\r\n      // Save to localStorage// Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data\r\n      })\r\n    );\r\n};// Set logged in user\r\n*/\r\n\r\nexport const setCurrentUser = decoded => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded\r\n  };\r\n};// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING\r\n  };\r\n};// Log user out\r\n\r\nexport const logoutUser = () => dispatch => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n}\r\n\r\n/*\r\nexport const logoutUser = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS\r\n  }\r\n}\r\n*/\r\n/*\r\nexport function logoutUser(){\r\n  const request = axios.get('/api/users/logout')\r\n                  .then( response => { \r\n                      return null\r\n                  });\r\n  return {\r\n      type: LOGOUT_SUCCESS,\r\n      payload:request\r\n  }        \r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}