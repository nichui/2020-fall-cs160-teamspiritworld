{"ast":null,"code":"/*\r\nimport React, {Component} from 'react';\r\nimport '../../css/styles.css';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\n*/\n\n/*\r\nconst RegisterSchema = Yup.object().shape({\r\n\tfirstName: Yup.string().required('Required!!'),\r\n\tlastName: Yup.string().required('Required!!'),\r\n\temail: Yup.string().email('Invalid email :(').required('Required !!'),\r\n\tpassword: Yup.string().min(6,'Too short').required('Required !!'),\r\n\tconfirmPassword: Yup.string().oneOf([Yup.ref('password'),null],'Passwords must match').required('Required !!'),})\r\n\t*/\n\n/*\t\r\nclass Register extends Component{\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t  firstname: \"\",\r\n\t\t  lastname:\"\",\r\n\t\t  email: \"\",\r\n\t\t  password: \"\",\r\n\t\t  password2: \"\",\r\n\t\t  errors: {}\r\n\t\t};\r\n\t  }\r\n\tcomponentDidMount() {\r\n\t\t// If logged in and user navigates to Register page, should redirect them to dashboard\r\n\t\tif (this.props.auth.isAuthenticated) {\r\n\t\t  this.props.history.push(\"/home\");\r\n\t\t}\r\n\t  }\r\n\t  */\n\n/*\r\nstate = {\r\n\tsuccess: false,\r\n\tvalidation:false\r\n}\r\n*/\n\n/*\r\ncomponentWillReceiveProps(nextProps) {\r\n\tif (nextProps.errors) {\r\n\t  this.setState({\r\n\t\terrors: nextProps.errors\r\n\t  });\r\n\t}\r\n  }\r\n\r\n\r\n  onChange = e => {\r\n\tthis.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n\te.preventDefault();\r\n\r\n\tconst newUser = {\r\n\t  firstname: this.state.firstname,\r\n\t  lastname: this.state.lastname,\r\n\t  email: this.state.email,\r\n\t  password: this.state.password,\r\n\t  password2: this.state.password2\r\n\t};\r\n\r\n\tthis.props.registerUser(newUser, this.props.history);\r\n  };\r\n*/\n{\n  /*\r\n  render(){\r\n  const{errors} = this.state;\r\n  return(\r\n  <div className=\"log\">\r\n  \t{/*<Formik\r\n  \t\tinitialValues={{firstName:\"\",lastName:\"\", email:\"\", password:\"\",confirmPassword:\"\"}}\r\n  \t\tvalidationSchema={RegisterSchema}\r\n  \t\tonSubmit={values=>{\r\n  \t\t\tthis.props.dispatch(registerUser(values)).then(response => {\r\n  \t\t\t\tif(!this.props.user.auth){\r\n  \t\t\t\t\tthis.setState({\r\n  \t\t\t\t\t\tvalidation:true\r\n  \t\t\t\t\t})\r\n  \t\t\t\t}\r\n  \t\t\t})    \r\n  \t\t}}\r\n  \t>\r\n  \t\t{({\r\n  \t\t\tvalues,\r\n  \t\t\terrors,\r\n  \t\t\ttouched,\r\n  \t\t\thandleChange,\r\n  \t\t\thandleBlur,\r\n  \t\t\thandleSubmit\r\n  \t\t})=>(\r\n  \t\t\t\t*/\n}\n{\n  /*\r\n  <form onSubmit={this.onSubmit} class=\"text-center border border-light p-5\">\r\n  \t\t<p class=\"h4 mb-4 FormTitle\">Sign up</p>\r\n   \t\t\t<div class=\"form-row mb-4\">\r\n     \t\t\t<div class=\"col\">\r\n         \r\n         \t\t\t<input  name=\"first name\" type=\"text\" id=\"defaultRegisterFormFirstName\" class=\"form-control\" placeholder=\"First name\"  onChange={this.onChange} value={this.state.firstname} error={errors.firstname} id=\"firstname\"/>\r\n  \t\r\n     \t\t\t</div>\r\n     \t\t\t<div class=\"col\">\r\n         \r\n         \t\t\t<input  name=\"last name\" type=\"text\" id=\"defaultRegisterFormLastName\" class=\"form-control\" placeholder=\"Last name\" onChange={ this.onChange}  value={this.state.lastname} error={errors.lastname} id=\"lastname\" />\r\n  \t\r\n  </div>\r\n  </div>\r\n   \r\n  \t\t<input  name=\"email\" type=\"email\" id=\"defaultRegisterFormEmail\" class=\"form-control mb-4\" placeholder=\"E-mail\" onChange={this.onChange} value={this.state.email} error={errors.email} id=\"email\" />\r\n  \t\t\t\t\r\n      \t\t\t<input   name=\"password\" type=\"password\" id=\"defaultRegisterFormPassword\" class=\"form-control\" placeholder=\"Password\" aria-describedby=\"defaultRegisterFormPasswordHelpBlock\" onChange={this.onChange}  value={this.state.password} error={errors.password} id=\"password\" />\r\n  \t\t<small id=\"defaultRegisterFormPasswordHelpBlock\" class=\"form-text text-muted mb-4\">\r\n    \t\t\t At least 8 characters and 1 digit\r\n  \t\t</small>\r\n  \n  \n  <input  name=\"confirm password\" type=\"password\" id=\"defaultRegisterPhonePassword\" class=\"form-control\" placeholder=\"Confirm Password\" aria-describedby=\"defaultRegisterFormPasswordHelpBlock\" onChange={this.onChange}  value={this.state.password2} error={errors.password2} id=\"password2\" />\r\n  \t\t<small id=\"defaultRegisterFormPasswordHelpBlock\" class=\"form-text text-muted mb-4\">\r\n    \t\t\tRe-enter your password\r\n  \t\t</small>\r\n  \n  \r\n  \t\t<hr/>\r\n  \t\t<button class=\"btn btn-info my-4 btn-block\" type=\"submit\">Submit</button>\r\n   \r\n  \r\n  </form>\r\n  */\n}\n{\n  /*</Formik>*/\n}\n{\n  /*\r\n    </div>\r\n  \n  \n  \n  \r\n  )\r\n  }\r\n  }\r\n  */\n}\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["C:/Users/khatk/Desktop/Tutorials/Web Development/spiritworld/client/src/components/Pages/Register.js"],"names":["Register","propTypes","registerUser","PropTypes","func","isRequired","auth","object","errors","mapStateToProps","state","connect","withRouter"],"mappings":"AAAA;;;;;;;;;;;AAWA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;AAoBC;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BK;AACH;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCG;AACJ;AAAC;AAAc;AAEnB;AAAC;;;;;;;;;;AASE;AACHA,QAAQ,CAACC,SAAT,GAAqB;AACpBC,EAAAA,YAAY,EAAEC,SAAS,CAACC,IAAV,CAAeC,UADT;AAEpBC,EAAAA,IAAI,EAAEH,SAAS,CAACI,MAAV,CAAiBF,UAFH;AAGpBG,EAAAA,MAAM,EAAEL,SAAS,CAACI,MAAV,CAAiBF;AAHL,CAArB;;AAKE,MAAMI,eAAe,GAAGC,KAAK,KAAK;AACnCJ,EAAAA,IAAI,EAAEI,KAAK,CAACJ,IADuB;AAEnCE,EAAAA,MAAM,EAAEE,KAAK,CAACF;AAFqB,CAAL,CAA7B;;AAIA,eAAeG,OAAO,CACvBF,eADuB,EAEvB;AAAEP,EAAAA;AAAF,CAFuB,CAAP,CAGbU,UAAU,CAACZ,QAAD,CAHG,CAAf","sourcesContent":["/*\r\nimport React, {Component} from 'react';\r\nimport '../../css/styles.css';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../../actions/authActions\";\r\n*/\r\n\r\n/*\r\nconst RegisterSchema = Yup.object().shape({\r\n\tfirstName: Yup.string().required('Required!!'),\r\n\tlastName: Yup.string().required('Required!!'),\r\n\temail: Yup.string().email('Invalid email :(').required('Required !!'),\r\n\tpassword: Yup.string().min(6,'Too short').required('Required !!'),\r\n\tconfirmPassword: Yup.string().oneOf([Yup.ref('password'),null],'Passwords must match').required('Required !!'),})\r\n\t*/\r\n/*\t\r\nclass Register extends Component{\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t  firstname: \"\",\r\n\t\t  lastname:\"\",\r\n\t\t  email: \"\",\r\n\t\t  password: \"\",\r\n\t\t  password2: \"\",\r\n\t\t  errors: {}\r\n\t\t};\r\n\t  }\r\n\tcomponentDidMount() {\r\n\t\t// If logged in and user navigates to Register page, should redirect them to dashboard\r\n\t\tif (this.props.auth.isAuthenticated) {\r\n\t\t  this.props.history.push(\"/home\");\r\n\t\t}\r\n\t  }\r\n\t  */\r\n\t/*\r\n\tstate = {\r\n\t\tsuccess: false,\r\n\t\tvalidation:false\r\n\t}\r\n\t*/\r\n\t/*\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\tif (nextProps.errors) {\r\n\t\t  this.setState({\r\n\t\t\terrors: nextProps.errors\r\n\t\t  });\r\n\t\t}\r\n\t  }\r\n\t\r\n\t\r\n\t  onChange = e => {\r\n\t\tthis.setState({ [e.target.id]: e.target.value });\r\n\t  };\r\n\t\r\n\t  onSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\r\n\t\tconst newUser = {\r\n\t\t  firstname: this.state.firstname,\r\n\t\t  lastname: this.state.lastname,\r\n\t\t  email: this.state.email,\r\n\t\t  password: this.state.password,\r\n\t\t  password2: this.state.password2\r\n\t\t};\r\n\t\r\n\t\tthis.props.registerUser(newUser, this.props.history);\r\n\t  };\r\n\t*/\r\n\t{/*\r\n\trender(){\r\n\t\tconst{errors} = this.state;\r\n\treturn(\r\n\t\t<div className=\"log\">\r\n\t\t\t{/*<Formik\r\n\t\t\t\tinitialValues={{firstName:\"\",lastName:\"\", email:\"\", password:\"\",confirmPassword:\"\"}}\r\n\t\t\t\tvalidationSchema={RegisterSchema}\r\n\t\t\t\tonSubmit={values=>{\r\n\t\t\t\t\tthis.props.dispatch(registerUser(values)).then(response => {\r\n\t\t\t\t\t\tif(!this.props.user.auth){\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tvalidation:true\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})    \r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{({\r\n\t\t\t\t\tvalues,\r\n\t\t\t\t\terrors,\r\n\t\t\t\t\ttouched,\r\n\t\t\t\t\thandleChange,\r\n\t\t\t\t\thandleBlur,\r\n\t\t\t\t\thandleSubmit\r\n\t\t\t\t})=>(\r\n\r\n\t\t\t\t*/}\r\n\t\t\t\t{/*\r\n\t\t\t<form onSubmit={this.onSubmit} class=\"text-center border border-light p-5\">\r\n    \t\t\t<p class=\"h4 mb-4 FormTitle\">Sign up</p>\r\n\r\n    \t\t\t<div class=\"form-row mb-4\">\r\n        \t\t\t<div class=\"col\">\r\n            \r\n            \t\t\t<input  name=\"first name\" type=\"text\" id=\"defaultRegisterFormFirstName\" class=\"form-control\" placeholder=\"First name\"  onChange={this.onChange} value={this.state.firstname} error={errors.firstname} id=\"firstname\"/>\r\n\t\t\t\t\t\t\r\n        \t\t\t</div>\r\n        \t\t\t<div class=\"col\">\r\n            \r\n            \t\t\t<input  name=\"last name\" type=\"text\" id=\"defaultRegisterFormLastName\" class=\"form-control\" placeholder=\"Last name\" onChange={ this.onChange}  value={this.state.lastname} error={errors.lastname} id=\"lastname\" />\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n    \r\n    \t\t\t<input  name=\"email\" type=\"email\" id=\"defaultRegisterFormEmail\" class=\"form-control mb-4\" placeholder=\"E-mail\" onChange={this.onChange} value={this.state.email} error={errors.email} id=\"email\" />\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n    \t\t\t<input   name=\"password\" type=\"password\" id=\"defaultRegisterFormPassword\" class=\"form-control\" placeholder=\"Password\" aria-describedby=\"defaultRegisterFormPasswordHelpBlock\" onChange={this.onChange}  value={this.state.password} error={errors.password} id=\"password\" />\r\n    \t\t\t<small id=\"defaultRegisterFormPasswordHelpBlock\" class=\"form-text text-muted mb-4\">\r\n       \t\t\t At least 8 characters and 1 digit\r\n    \t\t\t</small>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t<input  name=\"confirm password\" type=\"password\" id=\"defaultRegisterPhonePassword\" class=\"form-control\" placeholder=\"Confirm Password\" aria-describedby=\"defaultRegisterFormPasswordHelpBlock\" onChange={this.onChange}  value={this.state.password2} error={errors.password2} id=\"password2\" />\r\n    \t\t\t<small id=\"defaultRegisterFormPasswordHelpBlock\" class=\"form-text text-muted mb-4\">\r\n       \t\t\tRe-enter your password\r\n    \t\t\t</small>\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n   \t\t\t\t<hr/>\r\n    \t\t\t<button class=\"btn btn-info my-4 btn-block\" type=\"submit\">Submit</button>\r\n\r\n    \r\n\t\t\t\r\n\r\n\t\t\t</form>\r\n\t\t\t\t\t*/}\r\n\t\t\t\t{/*</Formik>*/}\r\n\t\t\t\r\n{/*\r\n   </div>\r\n\r\n\r\n\r\n\t\r\n\t)\r\n}\r\n}\r\n*/}\r\nRegister.propTypes = {\r\n\tregisterUser: PropTypes.func.isRequired,\r\n\tauth: PropTypes.object.isRequired,\r\n\terrors: PropTypes.object.isRequired\r\n  };\r\n  const mapStateToProps = state => ({\r\n\tauth: state.auth,\r\n\terrors: state.errors\r\n  });\r\n  export default connect(\r\n\tmapStateToProps,\r\n\t{ registerUser }\r\n  )(withRouter(Register));\r\n\r\n"]},"metadata":{},"sourceType":"module"}